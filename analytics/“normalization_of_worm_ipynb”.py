# -*- coding: utf-8 -*-
"""“normalization of worm.ipynb”的副本

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lRB7dxSZ3bF0oPc9WrYf-M7V1yQgSBur
"""

import pandas as pd

# Load the Excel file
file_path = '/content/data.xls'
sheets = ['Worm1', 'Worm2', 'Worm3', 'Worm4']

# Load data for each worm
data = {sheet: pd.read_excel(file_path, sheet_name=sheet) for sheet in sheets}

# Function to check the shape of the data for each worm
def check_shape(df, name):
    shape = df.shape
    print(f"Shape for {name}: {shape}")

# Check shape for each worm
for sheet in sheets:
    check_shape(data[sheet], sheet)

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler

sheets = ['Worm1', 'Worm2', 'Worm3', 'Worm4']


data = {sheet: pd.read_excel(file_path, sheet_name=sheet, na_values='NaN') for sheet in sheets}

# Behavior mapping
behavior_mapping = {1: 'Forward', 2: 'Turn', -1: 'Reverse', 0: 'pause'}


def process_data(df, name):
    # Filter data for forward movement
    df_forward = df[df['behavior'] == 1].copy()


    neural_columns = [col for col in df_forward.columns if col.startswith('Neuron')]


    initial_shape = df_forward.shape
    print(f"Initial shape for {name} (forward movement): {initial_shape}")


    print(f"NaN values before handling for {name} (forward movement):\n{df_forward[neural_columns].isnull().sum()}")

    # replacing NaN with mean
    for col in neural_columns:
        mean_value = df_forward[col].mean(skipna=True)  # Calculate mean excluding NaN values
        df_forward[col].fillna(mean_value, inplace=True)  # Replace NaN with the mean value


    print(f"NaN values after handling for {name} (forward movement):\n{df_forward[neural_columns].isnull().sum()}")


    shape_after_null_handling = df_forward.shape
    print(f"Shape after handling nulls for {name} (forward movement): {shape_after_null_handling}")

    # Normalize
    scaler = StandardScaler()
    df_forward[neural_columns] = scaler.fit_transform(df_forward[neural_columns])

    #check shape
    shape_after_normalization = df_forward.shape
    print(f"Shape after normalization for {name} (forward movement): {shape_after_normalization}")

    # only the neuron data excluding times /X/Y
    df_neurons_only = df_forward[neural_columns]

    return df_neurons_only

#Process data (filter, handle nulls, and normalize) and check shape for each worm
processed_data = {}
for sheet in sheets:
    processed_data[sheet] = process_data(data[sheet], sheet)

# Display the shape and the first few rows of the processed data for each worm
for sheet in sheets:
    print(f"{sheet} - Shape of data after processing: {processed_data[sheet].shape}")
    print(f"{sheet} - Data after filtering for forward movement, handling nulls, and normalization:")
    print(processed_data[sheet].head(), "\n")

# Save the normalized data for each worm
for sheet in sheets:
    output_file = f'{sheet}_normalized_data.csv'
    processed_data[sheet].to_csv(output_file, index=False)
    print(f"Normalized data for {sheet} saved to {output_file}")